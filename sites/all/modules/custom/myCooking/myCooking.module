<?php
/**
 * @file
 * Defines numeric field types.
 */
 
 
/**
 * Implements hook_field_formatter_info().
 */
function myCooking_field_formatter_info() {
  return array(
    // The 'Default' formatter is different for integer fields on the one hand,
    // and for decimal and float fields on the other hand, in order to be able
    // to use different default values for the settings.
    'myCooking_integer_duration' => array(
      'label' => t('Duration'),
      'field types' => array('number_integer'),     
    )
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function myCooking_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'myCooking_integer_duration':
		
      foreach ($items as $delta => $item) {
      	
		$markup = _myCooking_hour_converter($item['value']);
      	
		//finally, return our formatted value as the markup for this field formatter
        $element[$delta] = array('#markup' => $markup);
	  }
	  		    
      break;
  }

  return $element;
  }

//helper function to convert total minutes into hour(s) format

function _myCooking_hour_converter($total_minutes) {
	
		// if total_minutes =< 0 ------ print 'not reported'
		if ( $total_minutes <= 0 ) {
			 $markup = 'not reported'; } 
		
		else {
					
				//if total_minutes = 1 and 1/2 hours
				
				//if total_minutes = 1 hour and 20 minutes
				
				//if total_minutes = 2 hours
				
				//if total_minutes = 3 and 1/2 hours
				
				//if total_minutes = 3 hours and 20 minutes

			$hours = floor($total_minutes / 60) ;
			$minutes = $total_minutes % 60 ;		

			if ( $minutes ) {
				
					if ($minutes % 15 == 0) {
						 // convert minutes into quater format
						$minutes_gcd = _myCooking_time_gcd ($minutes, 60);
						$minutes_markup = '<sup>' . $minutes/$minutes_gcd . '</sup>&frasl;<sub>'. 60/$minutes_gcd . '</sub>';
						$hours < 1 ? $markup = $minutes_markup . ' minutes' : $markup = $hours . ' and ' . $minutes_markup . ' hours';
					
					} else {
						 // can't put in nicely quater format anyway, leave the minutes alone!
						$minutes_markup = $minutes . ' minutes';
						if ($hours < 1 ) {
							$markup = $minutes_markup;
						} else {
							$hours == 1 ? $markup = '1 hour and ' . $minutes_markup : $markup = $hours . ' hours ' . $minutes_markup;
						}
						
					}
				
				
				
			} else {		

				$hours == 1 ? $markup = '1 hour' : $markup = $hours . ' hours';
			}
			

		}
	
		return $markup;

}


 //helper function to get gcd of minutes
       function _myCooking_time_gcd($a, $b) {
         $b = ( $a == 0 )? 0 : $b;
         return ( $a % $b ) ? _myCooking_time_gcd($b, abs($a - $b)) : $b;
       }


/**
 * Implements hook_image_default_styles()
 */   
 
 function myCooking_image_default_styles() {
 $styles = array();

  $styles['Small'] = array(
    'label' => 'Small (160x120)',
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 160,
          'height' => 120,
          'upscale' => 0,
        ),
        'weight' => 0,
      ),

    ),
  );

  return $styles;
 }
	   
/**
 * Implements hook_field_info_alter().
 */
 
 function myCooking_field_info_alter(&$info) {
 	$info['number_integer']['microdata'] = TRUE;
 }
 
 /**
  * Fix nutrition info module
  */
  


